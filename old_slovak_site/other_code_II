def convert_to_roman(arabic_number)
  # if arabic_number == 1
  #   "I"
  # elsif arabic_number == 4
  #   "IIII"
  # elsif arabic_number == 5
  #   "V"
  # elsif arabic_number == 10
  #   "X"

=begin
  # this was the most common way that people did this, using a hash to keep track of the arabic #s and their decimal equivalents. Mine is a bit different and somehow both jankier and fewer lines of code than most.
  roman_hash = {
  10 => "X",
  5 => "V",
  1 => "I"
  }

  # using the modulos(doing, but repeating.)

  output_string = String.new # going to iterate through the hash and add to the output string

  roman_hash.each do |hasharabic, hashroman|
    output_string += hashroman * (arabic_number / hasharabic) # add to the output ("X" * # number of times the original input number is dividble by 10.) 
    arabic_number = arabic_number % hasharabic # reassign the original number to the remainder of original number / 10. 
  end
  # if the number was 42, 42 is divisible by 10 four times, (4 Xs get added to output string) w/ remainer 2. 2 is divisible by 5 zero times (O * string adds nothing) w/ remainder 2, 2 is divisible by 1 two times (2 Is get added)


  You start from the top b/c the collections of the smaller nums are represented by the bigger nums (eg 10 * I = X ), so you want to knock down the bigger numbers first and put them in the front.

=end


  #if arabic_number >= 1 && arabic_number < 5
  #  "I" * (arabic_number % 5)
  #elsif arabic_number >= 5 && arabic_number < 10
  #  "V" * (arabic_number / 5) + "I" * (arabic_number % 5)
  #elsif arabic_number >= 10 && arabic_number < 50
  #  if (arabic_number % 10) < 5
  #    "X" * (arabic_number/10) + "I" * (arabic_number % 5)
  #  elsif (arabic_number % 10) >= 5
  #    "X" * (arabic_number/10) + "V" * (arabic_number % 5) + "I" * (arabic_number % 5)
  #  end
  ## If arabic_number %10 > 5
  #end
  output_string
end




p convert_to_roman(1)
p convert_to_roman(2)
p convert_to_roman(4)
p convert_to_roman(5)
p convert_to_roman(6)
p convert_to_roman(9)
p convert_to_roman(10)
p convert_to_roman(11)
p convert_to_roman(42)
p convert_to_roman(49)
p convert_to_roman(75)